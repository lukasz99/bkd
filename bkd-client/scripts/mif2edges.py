#!/usr/bin/python3
import os
import sys
import argparse

pymex_dir="../pymex/pylib"
if os.path.isdir( pymex_dir ):
    print( "#pymex: using source library version" )
    sys.path.insert( 0, pymex_dir )

import pymex
from zipfile import ZipFile

import mif2edgesMod as mem

mif_file_path = "/home/sun/scripts/psi30"

# reference list of current dip nodes
# generated by uniprot-tool.py
# ----------------------------

#nodes_file_path = "../config/out_12-03-2021.tab"
#nodes_file_path = "/mnt/cluster2/home/lukasz/git/dip-rebuild/node-test50.tab"
ref_nodes_file_path = "/home/sun/bkd/bkd-client/config/out_12-17-2021"

# refernce list of current dip edges
#-----------------------------------

ref_edges_file_path="/home/lukasz/git/dip-rebuild/config/nset2edge_2021-12-19.tab"

# output files
#-------------

# edge cadidate file
#-------------------

edges_file_path = "../config/mif2list_edges.tab"
edges_file_path = "mif2edges_list.tab"

log_file_path = "../log/mif2list_errors.tab"
log_file_path = "mif2edges_test.log"

parser = argparse.ArgumentParser( description='mif2edges Tool' )

parser.add_argument('--rnodes', '-rn', dest="refnode", type=str,
                    required=False, default=ref_nodes_file_path,
                    help='Node reference file.')

parser.add_argument('--redges', '-re', dest="refedge", type=str,
                    required=False, default=ref_edges_file_path,
                    help='Node reference file.')

parser.add_argument('--edges', '-eo', dest="edgeout", type=str,
                    required=False, default=edges_file_path,
                    help='Edge output file.')

parser.add_argument('--log-file', '-l', dest="perrout", type=str,
                    required=False, default=log_file_path,
                    help='Error log.')

parser.add_argument('--year', dest="year", type=str,
                    required=False, default = None ,
                    help='Curation Year.')

parser.add_argument('--pmid', dest="pmid", type=str,
                    required=False, default = None ,
                    help='PMID.')

args = parser.parse_args()

nodeMaps = mem.generateNodeDicts( ref_nodes_file_path)
nlst2edge = mem.generateEdgeDicts( ref_edges_file_path, nodeMaps )

out_file = open( edges_file_path, 'w' )
log_file = open( log_file_path, 'w' )

out_file.write("#Interaction_DIP\tParticipant_DIP\tPubMed\tIMEx\tYear\n")
log_file.write("#Interaction_DIP\tParticipant_DIP\tPubMed\tIMEx\tYear\n")

upr_ids = set()

cyears = os.listdir(mif_file_path)

if args.year is not None:
    cyears = [args.year]

for year in cyears:
    zfiles = os.listdir('/'.join([mif_file_path, year]))
    if args.pmid is not None:
        zfiles =[args.pmid+".zip"]       
    for zip_file in zfiles:
        if zip_file.find('unassigned') < 0:
            myzip = ZipFile( '/'.join([mif_file_path, year, zip_file]))
            
            for sl in myzip.namelist():      
                if  sl.find('negative') < 0:
                                        
                    source = myzip.open( sl, 'r' )

                    rec = pymex.mif.Record().parseMif(source, ver='mif300')                    
                    mem. processMif( sl[:-4], year, rec, nodeMaps, nlst2edge, out_file, log_file)
                     
out_file.close()
log_file.close()

